/* semtense.c */
Obj *TenseFindInflTense(int lang, Obj *tense, Obj *mood);
Obj *TenseFindMainAux(int lang, Obj *auxtense, LexEntry *auxverb, Obj *maintense);
void TenseParseCompTenseSetAdv(PNode *adv, PNode **adv1, PNode **adv2, PNode **adv3);
void TenseParseCompTense_Adv(PNode *vp, PNode *adv, int lang, PNode **pn_mainverb, LexEntry **mainverb, PNode **pn_agreeverb, Obj **tense, Obj **mood, PNode **adv1, PNode **adv2, PNode **adv3);
void TenseParseCompTense1(PNode *pn, int lang, PNode **pn_mainverb, LexEntry **mainverb, PNode **pn_agreeverb, Obj **tense, Obj **mood, PNode **adv1, PNode **adv2, PNode **adv3);
void TenseParseCompTense(PNode *pn, int lang, PNode **pn_mainverb, LexEntry **mainverb, PNode **pn_agreeverb, Obj **tense, Obj **mood, PNode **adv1, PNode **adv2, PNode **adv3);
Bool TenseParse_IsOnlyAnAuxiliary(LexEntry *le);
Bool TenseParseIsTopCompTenseOK(PNode *pn, int lang);
Bool TenseParseIsSubCompTenseOK(PNode *pn, int lang);
PNode *TenseMakeWord(char *word, int pos, HashTable *ht, Discourse *dc);
PNode *TenseGenVerbEnglish1(LexEntry *le, LexEntry *advle, LexEntry *notle, LexEntry *justle, Obj *parent_tense, int tense, int number, int person, int mood, int isaux, Discourse *dc);
PNode *TenseGenVerbEnglish(LexEntry *mainle, LexEntry *advle, LexEntry *notle, Obj *tense, int subjnumber, int subjperson, int isaux, Discourse *dc);
PNode *TenseGenVerbFrench1(LexEntry *le, LexEntry *nele, LexEntry *pasle, LexEntry *advle, int tense, int gender, int number, int person, int mood, int degree, Discourse *dc);
PNode *TenseGenVerbFrench(LexEntry *mainle, char *usagefeat, LexEntry *nele, LexEntry *pasle, LexEntry *advle, Obj *tense, int subjgender, int subjnumber, int subjperson, int objgender, int objnumber, int objperson, int isaux, Discourse *dc);
Obj *TenseSubjRel(int style, int dialect, int lang);
Obj *TenseSubjunctivize(Obj *tense, int style, int dialect, int lang);
Obj *TenseIndicativize(Obj *tense, int style, int dialect, int lang);
Obj *TenseProgressivize1(Obj *tense, Obj *rel);
Obj *TenseProgressivize(Obj *tense, int lang, Obj *obj);
Obj *TenseInfinitivize(Obj *tense, int lang);
Obj *TenseGerundize(Obj *tense);
int TenseGetTenseStep(Ts *ts1, Ts *ts2, Float spread);
int TenseGetTenseStepDistance(Ts *ts1, Ts *ts2, Float spread);
Dur TenseStepDefaultDistance(TenseStep tensestep1, TenseStep tensestep2);
TenseStep TenseToTenseStep(Obj *obj);
Dur TenseDuration(TsRange *tsr);
void TenseGenConcord(Obj *obj1, Obj *obj2, TsRange *tsr1, TsRange *tsr2, Ts *now, int lang, int literary, Obj *rel, Obj **t1, Obj **t2);
Obj *TenseGenOne(Obj *obj, TsRange *tsr, Ts *now, int lang, int literary, Obj **aspect);
