/* uaquest.c */
Bool SenseIsValid(Float sense);
void senc(Float sense);
Answer *AnswerCreate(Obj *ua, Obj *question, Obj *qclass, Float sense, ObjList *answer, int sort_by_ts, int gen_pairs, int gen_tsr, TsrGenAdvice *tga, Answer *next);
Answer *AnswerCreateQWQ(Obj *ua, Obj *question, Float sense, ObjList *answer, Answer *next);
void AnswerFree(Answer *an);
void AnswerFreeAll(Answer *an);
Answer *AnswerLast(Answer *an);
Answer *AnswerAppendDestructive(Answer *an1, Answer *an2);
Float AnswerMaxSense(Answer *an);
Float ObjGenSpecificity(Obj *obj);
Float ObjListGenSpecificity(ObjList *objs);
void AnswerAdjustSense(Answer *an);
Answer *AnswerRemoveBelowThresh(Answer *an, Float thresh);
void AnswerGenInit(void);
void AnswerGenAdd(ObjList *answers);
void AnswerGenEnd(void);
void AnswerGen(Answer *an, Discourse *dc);
void AnswerGenAll(Answer *an, Discourse *dc);
void AnswerPrint(FILE *stream, Answer *an, Discourse *dc);
void AnswerPrintAll(FILE *stream, Answer *an, Discourse *dc);
Obj *UA_Question_IsIntAdverb(Obj *question, Obj *adverb_class, Obj **adverb);
int IsDescriptionCopula(Obj *obj);
Obj *ObjListDeref(Obj *obj);
Obj *UA_Question_IsDescription(Obj *question, Obj *pronoun_class, Obj *obj_class);
Obj *UA_Question_IsInterrogative(Obj *question, Obj **pronoun);
Answer *UA_QuestionLocationAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionTimeAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Obj *UA_Question_SpaceToNearReachable(Obj *subgoal);
Obj *UA_Question_SpaceToPtrans(Obj *subgoal);
Answer *UA_QuestionMeansPlan(Obj *question, Obj *subgoal, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionMeansAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionReasonAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionAppearanceAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionMannerAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionQuantityAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionDegreeAdverb(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionWeather2(Obj *question, TsRange *tsr, Answer *an, Obj *grid, Discourse *dc);
Answer *UA_QuestionWeather1(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionWeather(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Obj *ObjBuildQueryPtn(Obj *obj, int *found);
Answer *UA_QuestionPronoun(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Bool UA_Question_IsLocationQuestion(Obj *question, Obj **object);
Answer *UA_QuestionLocationPronoun(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionLocation(Obj *question, Obj *object, Obj *enclose_restriction, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionElementTop1(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionElementTop(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Obj *UA_Question_IsInterDetQuestion(Obj *question, Obj **class);
Answer *UA_QuestionQuantityAdjective(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Obj *ObjParseInterrogativeDeterminer(Obj *obj, Obj *det_class, Obj **modified);
Answer *UA_QuestionIdentDetGeneral(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Bool UA_Question_IsSimpIdentDet1(Obj *head, Obj *con0, Obj *con1, Obj *con2, Obj **object, Obj **restrict);
Bool UA_Question_IsSimpIdentDet(Obj *head, Obj *con, Obj **object, Obj **restrict);
Bool UA_Question_IsLocIdentDet(Obj *con, Obj **object, Obj **restrict);
Answer *UA_QuestionIdentificationDeterminer(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionNear(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionTemporalRelation2(Obj *rel, Obj *question, Context *cx, Obj *retrieved, int question_i, Obj *top_q, Answer *an, Discourse *dc);
Answer *UA_QuestionTemporalRelation1(Obj *rel, Obj *question, Context *cx, Obj *anchor, int question_i, Obj *top_q, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionTemporalRelation(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionDuration(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionDescribe(Obj *question, Obj *obj, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionDescribeHuman(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionDescribeObject(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *AnswerPromoteReasons(Obj *ua, Obj *question, Answer *last_an, Answer *an);
Answer *AnswerPromoteRephrasedAnswers(Obj *ua, Obj *question, Answer *last_an, Answer *an);
Answer *UA_QuestionCanned(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionStimulusSentence(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Obj *ObjSetMemberType(Obj *des);
Obj *ObjISA(Obj *anc, Obj *des);
Obj *YesResponse(Obj *assertion);
Obj *NoResponse(Obj *assertion);
Obj *NoButResponse(Obj *but);
Answer *UA_QuestionISA(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
ObjList *UA_QuestionYesNo3(Obj *question, Obj *top_question, TsRange *tsr, Discourse *dc, int depth, int maxdepth, Obj *attr, Float in_sense, Float *out_sense);
Answer *UA_QuestionYesNo2(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionYesNo1(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionYesNo(Obj *question, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_QuestionWordQuestion(Obj *question, Context *cx, TsRange *tsr, Answer *an, Discourse *dc);
Answer *UA_Question2(Obj *question, Context *cx, int eoschar, Answer *an, Discourse *dc);
Answer *UA_Question1(Obj *question, Context *cx, int eoschar, Answer *an, Discourse *dc);
Float UA_Question(Discourse *dc, Context *cx, Obj *con, int eoschar, Answer **answer);
void CommentaryInit(void);
void CommentaryAdd(Context *cx, ObjList *objs, Obj *tga_question);
void CommentaryFlush(Context *cx);
