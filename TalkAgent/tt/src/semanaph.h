/* semanaph.c */
Anaphor *AnaphorCreate(Obj *con, Obj *source_con, PNode *pn, int salience, Anaphor *next);
void AnaphorFree(Anaphor *an);
void AnaphorFreeAll(Anaphor *anaphors);
Anaphor *AnaphorCopyAll(Anaphor *anaphors);
Anaphor *AnaphorAppend(Anaphor *an1, Anaphor *an2);
Anaphor *AnaphorAppend3(Anaphor *an1, Anaphor *an2, Anaphor *an3);
Anaphor *AnaphorLast(Anaphor *an);
Anaphor *AnaphorAppendDestructive(Anaphor *an1, Anaphor *an2);
void AnaphorPrint(FILE *stream, Anaphor *an, int show_pn);
void AnaphorPrintAll(FILE *stream, Anaphor *anaphors);
void AnaphorPrintAllLine(FILE *stream, Anaphor *anaphors);
ObjList *Sem_AnaphoraObject(Obj *con, Obj *source_con, PNode *pn, ObjList *r);
void Sem_AnaphoraObjListSet(ObjList *objs, Obj *source_con, PNode *pn);
Anaphor *ObjAnaphorBuild(Obj *obj, PNode *obj_pn, Anaphor *r);
void ObjListAnaphorAdd(ObjList *objs);
ObjList *Sem_AnaphoraDeictic(PNode *pn, ObjList *in, int gender, int number, ObjList *r);
Bool Sem_AnaphoraMatch(int ant_salience, int anaphor_gender, int ant_gender, int anaphor_number, int ant_number, int anaphor_person, int ant_person);
Bool Sem_AnaphoraPluralMatch(int ant_salience, int anaphor_gender, int antecedent_gender, int anaphor_number, int antecedent_number, int anaphor_person, int antecedent_person);
ObjList *Sem_AnaphoraPronounIntrasentential1(Obj *pronoun, PNode *pronoun_pn, Obj *class, int pronoun_gender, int pronoun_number, int pronoun_person, Context *cx, Obj *obj, PNode *obj_pn, ObjList *r, ObjList **plurals);
ObjList *Sem_AnaphoraPronounIntrasentential(Obj *pronoun, PNode *pronoun_pn, Obj *class, int pronoun_gender, int pronoun_number, int pronoun_person, Context *cx, Obj *obj, PNode *obj_pn, ObjList *r);
ObjList *Sem_AnaphoraPronounIntersentential(Obj *pronoun, PNode *pn, Obj *class, int gender, int number, int person, Context *cx, int max_sent_dist, ObjList *r);
ObjList *Sem_AnaphoraPronoun2(Obj *pronoun, PNode *pn, Obj *class, Context *cx, int gender, int number, int person, Obj *topcon, int max_sent_dist, ObjList *r);
ObjList *Sem_AnaphoraPronoun1(Obj *pronoun, PNode *pn, Context *cx, int gender, int number, int person, Obj *topcon);
ObjList *Sem_AnaphoraPronoun0(Obj *pronoun, PNode *pn, Context *cx, int gender, int number, int person, Obj *topcon);
ObjList *Sem_AnaphoraPronoun(Obj *pronoun, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraPronoun_AnFree(Obj *pronoun, PNode *pn, Context *cx, int gender, int number, int person, Obj *topcon);
ObjList *Sem_AnaphoraDefiniteArticle(Obj *det, Obj *det_arg, PNode *det_pn, PNode *det_arg_pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraIndefiniteArticle(Obj *det, Obj *det_arg, PNode *det_pn, PNode *det_arg_pn, Context *cx, Obj *topcon);
void PNodeGetGNP_Possessive(PNode *pn, int lang, int *gender, int *number, int *person);
ObjList *Sem_AnaphoraPossessiveDeterminer(Obj *det, Obj *det_arg, PNode *det_pn, PNode *det_arg_pn, Context *cx, Obj *topcon, int *do_suchthat);
ObjList *Sem_AnaphoraDeterminer(Obj *det, Obj *det_arg, PNode *det_pn, PNode *det_arg_pn, Context *cx, Obj *topcon, int *do_suchthat);
LexEntryToObj *PNodeToLeo(PNode *pn);
Bool Sem_AnaphoraIsCopulaPossessive(Obj *obj, Obj **det, PNode **det_pn, Obj **subj, PNode **subj_pn, Obj **rel, PNode **rel_pn, LexEntryToObj **copula_leo);
ObjList *Sem_AnaphoraParseCopulaPossessive(Obj *det, PNode *det_pn, Obj *subj, PNode *subj_pn, Obj *rel, PNode *rel_pn, LexEntryToObj *copula_leo, Context *cx, Obj *topcon);
void Sem_AnaphoraTs(Ts *ts, Context *cx);
ObjList *Sem_AnaphoraTime(ObjList *objs, Context *cx);
void Sem_AnaphoraIntensionParseNew1(Obj *class, ObjList *props, Obj *newobj, Context *cx, Obj *skip_this_prop);
Obj *PropFix(Obj *obj);
Bool PropsIsOK(ObjList *props);
ObjList *Sem_AnaphoraIntensionParseNew(Obj *class, ObjList *props, Obj *source_con, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraIntensionParse1(Obj *class, ObjList *props, Obj *source_con, PNode *pn, Context *cx, int cx_only, int new_only, Obj *topcon);
ObjList *Sem_AnaphoraIntensionParse(Obj *obj, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraIntensionParses(ObjList *objs, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraIntensionIf(int do_suchthat, ObjList *r, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraParse1(Obj *obj, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraParse(Obj *obj, PNode *pn, Context *cx, Obj *topcon);
ObjList *Sem_AnaphoraParseA(Obj *obj, PNode *pn, Context *cx, Obj *topcon);
Bool Sem_AnaphoraIsCoreferenceOKSymmetric(Anaphor *an1, Anaphor *an2);
Bool Sem_AnaphoraIsCoreferenceOKAsymmetric(Anaphor *an1, Anaphor *an2, PNode *root);
Bool Sem_AnaphoraIsCoreferenceOK(Anaphor *anaphors, PNode *root);
ObjList *Sem_AnaphoraPrune(ObjList *objs, PNode *root);
ObjList *Sem_Anaphora(Obj *concept, Context *cx, PNode *root);
void Sem_AnaphoraCommit1(Anaphor *an, Context *cx);
void Sem_AnaphoraCommit(Anaphor *anaphors, Context *cx);
Obj *Sem_AnaphoraCaseToPronoun(Discourse *dc, Obj *cas, int same_as_subject);
void Sem_AnaphoraGetGN(ObjList *objs, Obj *obj, int *gender, int *number);
Bool Sem_AnaphoraIsLocation(Discourse *dc, Obj *obj);
Bool Sem_AnaphoraIsGenerallyKnown(Obj *obj);
Bool Sem_Anaphora_ObjHasHighestSalienceAmong(Obj *obj, ObjList *objs);
void Sem_AnaphoraGenPronoun(Discourse *dc, Obj *obj, Obj *topcon, int same_as_subject, Obj *cas, int *gender, int *number, int *person, Obj **pronoun_con, PNode **pronoun_pn, Bool *isknown, int *actual_number);
Obj *Sem_AnaphoraGetIndefiniteArticle(Obj *obj, char *usagefeat, Discourse *dc);
Obj *Sem_AnaphoraGenArticle(Discourse *dc, Obj *obj, Obj *actual_obj, LexEntry *le, char *usagefeat, Obj *aspect, int number, int pos, int isknown, Obj *sugg_arttype);
Obj *Sem_AnaphoraPost(Obj *in);
