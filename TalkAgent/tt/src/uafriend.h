/* uafriend.c */
Friend *FriendCreate(Actor *ac, Ts *ts, Obj *actor);
Friend *FriendFind(Actor *ac, Ts *ts, Obj *actor, int create_ok);
void FriendUpdate(Actor *ac, Ts *ts, Friend *f, Obj *old_con, Obj *new_con);
Friend *FriendCopy(Friend *f0, Context *cx_parent, Context *cx_child, Subgoal *sg_parents, Friend *next);
Friend *FriendCopyAll(Friend *f, Context *cx_parent, Context *cx_child, Subgoal *sg_parents);
void FriendPrint(FILE *stream, Friend *f);
void FriendPrintAll(FILE *stream, Friend *f);
ObjList *UA_Friend_AttitudesOf(Ts *ts, Obj *a);
ObjList *UA_Friend_AttitudeObjects(Ts *ts, Obj *a);
Float UA_Friend_KnownAttitude(Ts *ts, Obj *a, Obj *toward, ObjList **assertions);
Float UA_Friend_KnownSignedIpr(Ts *ts, Obj *a1, Obj *a2, ObjList **assertions);
Float UA_Friend_InferredAttitude(Ts *ts, Obj *a1, Obj *a2, ObjList **justifications);
Float UA_FriendAttitude(Ts *ts, Obj *a, Obj *toward, int use_existing_ipr, ObjList **justifications);
void UA_Friend_FriendEnemy(Actor *ac, Ts *ts, Obj *a, Obj *friend, Float sgn, Obj *in);
void UA_Friend_NewIpr(Actor *ac, Ts *ts, Obj *a, Obj *friend, Obj *in);
Bool UA_Friend_IprIsConflicting(Obj *ipr1, Obj *ipr2);
Bool UA_Friend_IprNextState(Obj *was, Obj *is);
void UA_Friend_Maintain(Actor *ac, Ts *ts, Obj *a, Obj *in, Friend *f);
void UA_Friend_Ipr(Actor *ac, Ts *ts, Obj *a, Obj *in, Obj *other, Friend *f);
void UA_Friend_Attitude(Actor *ac, Ts *ts, Obj *a, Obj *in);
void UA_Friend_Relative(Actor *ac, Ts *ts, Obj *a, Obj *in);
void UA_Friend_Tutoyer(Actor *ac, Ts *ts, Obj *a, Obj *in, Obj *other);
Bool DiscourseIsSpeakerStranger(Discourse *dc);
void UA_NameRequest(Context *cx, Discourse *dc);
Bool IsFirstConversationWith(Obj *human);
void UA_NameRequestResponse(Context *cx, Ts *ts, Obj *in);
void UA_Friend(Actor *ac, Ts *ts, Obj *a, Obj *in);
Bool UA_FriendDoesHandle(Obj *rel);
void PA_MaintainFriendOf(Context *cx, Subgoal *sg, Ts *ts, Obj *a, Obj *o);
