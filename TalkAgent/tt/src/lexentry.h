/* lexentry.c */
void LexEntryStatsBegin(void);
void LexEntryStatsEnd(void);
int FeatureGet(register char *features, register char *ft);
int FeatureGetDefault(char *features, char *ft, int def);
int FeatureGetRequired(char *errstring, char *features, char *ft);
Bool FeatureMatch(int f1, int f2);
Bool FeatureDialectMatch(int desired, int candidate);
Bool FeatureRelroleMatch(int desired, int candidate);
Bool FeatureMatch1(int f1, int f2);
Bool FeatureFtMatch(char *f1, char *f2, char *ft);
Bool FeatureFtEqual(char *f1, char *f2, char *ft);
Bool FeatureCompatInflect(char *f1, char *f2);
Bool FeatureCompatLexEntry(char *f1, char *f2);
Bool FeatureDefaultTo(char *features, int maxlen, char *ft, unsigned int def);
int FeatureFlipLanguage(int lang);
void FeatureCopyIn(char *in, char *set, char *out);
void FeatureCheck(char *features, char *set, char *context);
Obj *FeatToCon1(int feature);
Obj *FeatToCon(int feature);
int ConToFeat(Obj *obj);
void FeatPrintUnused(FILE *stream);
void FeaturesForDbFile(char *feat);
void FeatCanonCmp(char *in, char *out);
void FeatCanon(char *in, char *out);
int FeatCmp(char *f1, char *f2);
Word *WordCreate(char *srcphrase, char *features, Word *rest, HashTable *ht);
void WordFreeList(Word *words);
Word *WordLast(Word *words);
Word *WordInsertCanonOrder(Word *words, Word *word);
int WordGetUniqueGender(Word *infl);
Bool WordListEqual(Word *infl1, Word *infl2);
void WordPrint(FILE *stream, Word *word);
void WordPrintAll(FILE *stream, Word *word);
void WordPrintText(Text *text, Word *word);
void WordPrintTextAll(Text *text, Word *word);
IndexEntrySpell *IndexEntrySpellCreate(LexEntry *lexentry, char *key, char *features, IndexEntrySpell *next);
void IndexEntrySpellIndexInfl(char *key0, LexEntry *lexentry, char *features, HashTable *ht);
IndexEntry *LexEntryFindPhraseRelaxed2(char *src, char *tot_red_src, int srclang, int lang, void (*redfn)(char *), int level, int maxlevel);
IndexEntry *LexEntryFindPhraseRelaxed1(char *src, int srclang, int lang, int maxlevel, int leveloffset);
IndexEntry *LexEntryFindPhraseRelaxed(HashTable *ht, char *src, int lang, int maxlevel, int *freeme);
IndexEntry *LexEntryFindPhrase1(HashTable *ht, char *phrase, int maxlevel, int derive_ok, int derive_depth, int *freeme);
IndexEntry *LexEntryFindPhrase(HashTable *ht, char *phrase, int maxlevel, int derive_ok, int nofail, int *freeme);
IndexEntry *IndexEntryCreate(LexEntry *lexentry, char *features, IndexEntry *next);
IndexEntry *IndexEntryAppendDestructive(IndexEntry *ie1, IndexEntry *ie2);
IndexEntry *IndexEntryCopy(IndexEntry *ie);
void IndexEntryFree(IndexEntry *ie);
IndexEntry *IndexEntryGet(char *srcphrase, HashTable *ht);
IndexEntry *IndexEntryIndexInfl(char *key, LexEntry *lexentry, char *features, HashTable *ht);
IndexEntry *IndexEntryIndex(LexEntry *le, HashTable *ht);
void LexEntryInit(void);
void LexEntryCheckSrcphrase(LexEntry *le);
LexEntry *LexEntryGetSrcphrase(char *srcphrase, int gender, int pos, HashTable *ht);
LexEntryToObj *LexEntryGetLeo(LexEntry *le);
ObjList *LexEntryGetLeoObjs(LexEntry *le);
void LexEntryCheck2(char *srcphrase, char *features, int pos, int really, HashTable *ht, int checkpos);
void LexEntryCheck1(char *srcphrase, char *features, int pos, int really, HashTable *ht);
LexEntry *LexEntryCreate(char *srcphrase, char *features, HashTable *ht);
void LexEntryAddInfl(LexEntry *le, Word *word);
void LexEntryCreateNumber(char *number);
LexEntry *LexEntryFind(char *srcphrase, char *features, HashTable *ht);
HashTable *LexEntryLangHt(char *features);
HashTable *LexEntryLangHt1(int lang);
int LexEntryHtLang(HashTable *ht);
HashTable *LexEntryHtFlip(HashTable *ht);
LexEntry *LexEntryFindInfl1(char *word, char *features, HashTable *ht);
LexEntry *LexEntryFindInfl(char *word, char *features, HashTable *ht, int lowering_ok);
Word *LexEntryGetInflection1(LexEntry *le, int tense, int gender, int number, int person, int mood, int degree, Discourse *dc);
Word *LexEntryGetInflection(LexEntry *le, int tense, int gender, int number, int person, int mood, int degree, int complain, Discourse *dc);
Word *LexEntryGetInfl(LexEntry *le, Discourse *dc);
Word *LexEntryGetAlter(LexEntry *le, char *features, int alter);
LexEntry *LexEntryGetFrenchAux(int etre);
ObjToLexEntry *LexEntryLinkToObj(LexEntry *le, Obj *obj, char *features, HashTable *ht, LexEntry **les, int lelen, int *delims, int *subcats, ThetaRole *theta_roles_expl);
Bool LexEntryConceptIsAncestor(Obj *con, LexEntry *le);
Bool LexEntryAllConceptsFeat(int usagefeat, LexEntry *le);
Bool LexEntryAnyConceptsFeat(int usagefeat, LexEntry *le);
Obj *LexEntryGetConIsAncestor(Obj *con, LexEntry *le);
Bool LexEntrySatisfiesCaseFilter(Obj *cas, LexEntry *le, int lang);
Bool IEConceptIs(IndexEntry *ie, Obj *class);
Word *LexEntryReadInflWord(FILE *stream, char *lefeat, HashTable *ht);
LexEntry *LexEntryReadInfl(FILE *stream, HashTable **htp);
void LexEntryReadInflStream(FILE *stream);
void LexEntryReadInflFile(char *filename);
int LexEntryObjNameFix(int c, int report_fixes);
void LexEntryToObjName(char *in, char *out, int feature_sep, int report_fixes);
Bool LexEntryRead(FILE *stream, Obj *concept);
void LexEntryReadString(char *lextext, Obj *concept, int assume_freq);
LexEntry *LexEntryInflectWord1(char *word, int lang, int pos, char *known_features, HashTable *ht);
void LexEntryInflectWord0(char *word, int lang, char *known_features, HashTable *ht, LexEntry **le1, LexEntry **le2, LexEntry **le3, LexEntry **le4, LexEntry **le5);
LexEntry *LexEntryInflectWord(char *word, int lang, char *known_features, HashTable *ht);
void LexEntryPrintInvariantMFSP(FILE *stream, char *word, char *features, char *comment, char *known_features);
void LexEntryPrintInvariantSP(FILE *stream, char *word, char *features, char *comment, char *known_features);
void LexEntryPrintEmpty(FILE *stream, char *word, char *features, char *comment, char *known_features);
LexEntry *LexEntryNewWord(char *word, char *features, Obj *concept, HashTable *ht);
void LexEntryNameForHuman(Obj *human, int gender, Name *nm);
void LexEntryReadNameA(char *lextext, Obj *concept, char *features);
void LexEntryReadName(char *lextext, Obj *concept, char *features);
void LexEntryReadString1(char *lextext, Obj *concept, char *features);
void LexEntryBuildLeFeatures(char *in, int pos, char *out);
void LexEntryBuildLinkFeatures(char *in, char *out);
LexEntry *LexEntryReadWord(char *in_word, char *features, int nocaseadjust, Obj *concept, HashTable *ht, int inside_phrase, char **wordp);
void LexEntryBuildNAFeatures(char *features, Obj *concept, char *nfeatures, char *afeatures);
void LexEntryReadNounAdj(char *word, char *features, Obj *concept, HashTable *ht, int inside_phrase, char **wordp);
LexEntry *LexEntryReadPhraseWord(char *phraseword, int gender, int pos, int number, int lang, Obj *concept, HashTable *ht, int noinflect, char **wordp, int *delimp, int *subcatp);
void LexEntryInflectPhraseProb(char *srcphrase, char *inflfeatures);
Word *LexEntryInflectPhrase2(LexEntry **les, int lelen, char **words, int *delims, char *lefeat, char *inflfeatures, char *matchfeat, Word *rest, int forcelower, HashTable *ht);
int LexEntryNumberOfWords(LexEntry *le);
Bool LexEntryIsPhrase(LexEntry *le);
Bool LexEntryIsPhraseOrExpl(LexEntry *le);
Bool WordIsPhrase(Word *w);
Bool IsPhrase(char *s);
Bool LexEntryFormPhraseSeps(int lelen, char **seps, int maxlen, char *phrase_seps);
void LexEntryAddSep(LexEntry *le, char *inphrase, int maxlen, char *outphrase);
LexEntry *LexEntryInflectPhrase1(LexEntry **les, int lelen, char **words, char **seps, int *delims, int *subcats, char *features, int gender, int pos, int number, int lang, Obj *concept, int forcelower, HashTable *ht);
LexEntry *LexEntryInflectPhrase(LexEntry **les, int lelen, char **words, char **seps, int *delims, int *subcats, char *features, int gender, int pos, int number, int lang, Obj *concept, HashTable *ht);
ThetaRole *LexEntryPhrasalVerbReadPre(char *phrase, int lang, HashTable *ht, char **nextp, char *morefeat);
Bool LexEntryPhraseRead_LelenOvf(int lelen);
char *LexEntryPhrasalVerbReadNext(char *in, char *out, int *delim, int *subcat, int *position);
void LexEntryPhrase_ElimInfl(char *out);
ThetaRole *LexEntryPhrasalVerb_ExplAdd(char *element, int position, int lang, HashTable *ht, ThetaRole *theta_roles_expl);
LexEntry *LexEntryPhrasalVerbRead(char *phrase, char *features, Obj *concept, int gender, int pos, int number, int lang, HashTable *ht);
LexEntry *LexEntryPhraseRead1(char *phrase, char *features, Obj *concept, int gender, int pos, int number, int lang, HashTable *ht);
LexEntry *LexEntryPhraseRead(char *phrase, char *features, Obj *concept, int gender, int pos, int number, int lang, HashTable *ht);
Bool IndexEntryIsPos(IndexEntry *ie, int pos);
void LexEntryGuessFeatures(char *word, int lang, HashTable *ht, int *gender, int *pos, int *number);
void LexEntryPhraseToDbFile(char *in, int gender, int pos, int number, int lang, HashTable *ht, int maxlen, char *out);
void LexEntryDbFileToPhrase(char *in, char *out);
void LexEntryTool2(FILE *stream, LexEntry *le);
void LexEntryTool1(FILE *stream, HashTable *ht, char *phrase);
void LexEntryTool(void);
void LexEntryScan1(FILE *stream, char *features);
void LexEntryScan(void);
void LexEntryInflScan1(FILE *stream, char *features);
void LexEntryInflScan(void);
void LexEntrySuffixGender1(FILE *stream, char *suffix);
void LexEntrySuffixGender(void);
void LexEntryPrintPolysemous(FILE *stream, int lang);
ObjListList *LexEntryPolysemous(int lang);
void LexEntryPrintPOSAmbiguous1(char *word, IndexEntry *ie);
void LexEntryPrintPOSAmbiguous(HashTable *ht);
void LexEntryCoverageCheck(char *fn, HashTable *ht, int print_missing);
void LexEntryValidateInflAgainstCorpus(Corpus *corpus, Word *word, int lang);
Bool LexEntryIsMascFem(LexEntry *le);
void LexEntryValidateAgainstCorpus(Corpus *corpus, int lang);
Answer *LexEntryJuxtapose_ObjHypoth(Obj *q, Obj *obj1, Obj *obj2, Answer *an);
Answer *LexEntryJuxtapose_Obj(Obj *obj1, Obj *obj2, Answer *an);
ObjList *LexEntryToConcepts(char *phrase, HashTable *ht);
Answer *LexEntryJuxtapose_Phrase(char *phrase1, char *phrase2, Answer *an);
void LexEntryJuxtapose(FILE *in, FILE *out, FILE *err);
Bool LexEntryIsFrenchVowel(int c);
Bool LexEntryIsFrenchVowel1(int c);
int LexEntryFrenchInitialSound(int c);
Bool LexEntryIsEnglishVowel(int c);
int LexEntryEnglishInitialSound(int c);
Obj *LexEntrySuperlativeClass(char *word, int lang);
LexEntry *LexEntrySuperlativeAdverb(Obj *class, Discourse *dc);
Bool LexEntryIsPreposedAdj(char *usagefeat, int pos, Discourse *dc);
Bool LexEntryIsEnglishInvertibleVerb(LexEntry *le, char *features);
Bool LexEntryWordIs(LexEntry *le, char *srcphrase, int pos, int lang);
int LexEntryHasAnyExpl(LexEntry *le);
