/* synfilt.c */
Float Syn_ParseFilterEY_E(PNode *e, PNode *y, int lang);
Float Syn_ParseFilter_Verb_Or_InterHB(PNode *w);
Bool Syn_ParseFilter_IsXE(PNode *z);
Float Syn_ParseFilterBW_WB_W(PNode *b, PNode *w, int is_bw, int lang);
Float Syn_ParseFilterBE_E(PNode *b, PNode *e, int lang);
Float Syn_ParseFilterDE_E(PNode *d, PNode *e, int lang);
Float Syn_ParseFilterXE_X(PNode *x, PNode *e, int lang);
Float Syn_ParseFilterEX_X(PNode *e, PNode *x, int lang);
Float Syn_ParseFilterDX_X(PNode *d, PNode *x, int lang);
Bool Syn_Parse_IsAdvShiftableToVP(PNode *w, PNode *x, int lang);
Float Syn_ParseFilterWE_W(PNode *w, PNode *e, int lang);
Bool Syn_ParseRightmostIsPronoun(PNode *w);
Float ScoreCount(int cnt, int score_max_cnt, int score_min_cnt);
Float Syn_ParseFilterWY_W(PNode *w, PNode *y, int lang);
Float Syn_ParseFilterWX_W(PNode *w, PNode *x, int lang);
Float Syn_ParseFilterBW_W(PNode *b, PNode *w, int lang);
Float Syn_ParseFilterWB_W(PNode *w, PNode *b, int lang);
Bool Syn_ParseIsPronounVerbInversion(PNode *v, PNode *h, int lang);
Bool Syn_ParseIsNPVerbInversion(PNode *w, PNode *x, int lang);
Bool Syn_ParseIsNPVerbInversionVP(PNode *w, int lang);
Bool Syn_ParseIsInversion(PNode *w, int lang);
Bool Syn_Parse_IsVerbPhrasePronoun(PNode *h, int lang);
Float Syn_ParseFilterWH_HW_W(PNode *w, PNode *h, int lang);
Float Syn_ParseFilterWH_W(PNode *w, PNode *h, int lang);
Float Syn_ParseFilterHW_W(PNode *h, PNode *w, int lang);
Float Syn_ParseFilterWV_W(PNode *w, PNode *v, int lang);
Float Syn_ParseFilterKX_X(PNode *k, PNode *x, int lang);
Bool Syn_ParsePresPartPrep(LexEntry *le);
Float Syn_ParseFilterRX_Y(PNode *r, PNode *x, int lang);
Float Syn_ParseFilterRB_Y(PNode *r, PNode *b, int lang);
Float Syn_ParseFilterKY_Y(PNode *k, PNode *y, int lang);
Float Syn_ParseFilterXY_X(PNode *x, PNode *y, int lang);
Bool Syn_ParseIsXX_X_NotApposition(PNode *x1, PNode *x2, int lang);
int Syn_Parse_RuleAppCount(PNode *pn, int lhs1, int lhs2, int rhs);
int Syn_ParseFilter_PronounAppositive(PNode *x, int lang);
Float Syn_ParseFilterKE_E(PNode *k, PNode *e, int lang);
Float Syn_ParseFilterEE_E(PNode *e1, PNode *e2, int lang);
Float Syn_ParseFilterXX_X(PNode *x1, PNode *x2, int lang);
Float Syn_ParseFilterX9_X(PNode *x, PNode *element, int lang);
Float Syn_ParseFilterYY_Y(PNode *y1, PNode *y2, int lang);
Bool Syn_ParseFilter_IsPrepRel(PNode *y);
Bool Syn_ParseIsNonNominalRelativeZ(PNode *z);
Float Syn_ParseFilterXZ_X(PNode *x, PNode *z, int lang);
Bool Syn_ParseIsCompleteSentence(PNode *z, int lang);
Float Syn_ParseFilterXZ_Z(PNode *x, PNode *z, int lang);
Bool Syn_Parse_IsOnlyRelativeW(PNode *w, int lang);
Float Syn_ParseFilterXW_X(PNode *x, PNode *w, int lang);
Float Syn_ParseFilterHX_Z(PNode *h, PNode *x, int lang);
Float Syn_ParseFilterXE_Z(PNode *x, PNode *e, int lang);
Float Syn_ParseFilterXW_Z(PNode *x, PNode *w, int lang);
Float Syn_ParseFilterYZ_Z(PNode *y, PNode *z, int lang);
Float Syn_ParseFilterEW_Z(PNode *y, PNode *w, int lang);
Bool Syn_ParseIsNP_Genitive(PNode *pn, int lang);
Bool Syn_ParseIsNPNP_Genitive(PNode *pn, int lang);
Bool Syn_ParseIsNPPP_Genitive(PNode *pn);
Bool Syn_ParseIsSimpleAdjP(PNode *e);
Float Syn_ParseFilterEZ_Z(PNode *e, PNode *z, int lang);
Bool Syn_ParseZZ_ZConjunctionOK(PNode *pn);
Float Syn_ParseFilterZZ_Z(PNode *z1, PNode *z2, int lang);
Float Syn_ParseFilterBZ_Z(PNode *b, PNode *z, int lang);
Float Syn_ParseFilterZB_Z(PNode *z, PNode *b, int lang);
Float Syn_ParseFilterH_X(PNode *h, int lang);
Float Syn_ParseFilterW_Z(PNode *w, int lang);
Float Syn_ParseFilterZ_X(PNode *z, int lang);
