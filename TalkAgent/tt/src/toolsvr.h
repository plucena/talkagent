/* toolsvr.c */
void SocketInit(void);
Socket *SocketCreate(int fd, char *host, int bufsize);
void SocketFree(Socket *skt);
Bool SocketReadLine(Socket *skt, int linelen, char *line);
void SocketWrite(Socket *skt, char *s);
Bool Tool_Server_ProcessLine(Socket *skt, char *line);
void Tool_Server_Status(Socket *skt, char *p);
void Tool_Server_ISA(Socket *skt, char *p);
void Tool_Server_IsPartOf(Socket *skt, char *p);
void Tool_Server_AncDesc(Socket *skt, char *cmd, char *p);
void Tool_Server_Retrieve(Socket *skt, char *p);
void Tool_Server_PhraseToConcepts(Socket *skt, char *p);
void Tool_Server_ConceptToLexEntries(Socket *skt, char *p);
void Tool_Server_Tag(Socket *skt, char *p);
void Tool_Server_SemanticParse(Socket *skt, char *p, int isSemParse);
void Tool_Server_Generate(Socket *skt, char *p);
void Tool_Server_Chatterbot(Socket *skt, char *p);
void Tool_Server_ClearContext(Socket *skt);
void Tool_Server_CaseParse(Socket *skt, char *p, int store);
void Tool_Server_CaseCommonSenseQuery(Socket *skt, char *p);
void Tool_Server_CaseStoryParse(Socket *skt, char *p);
void Tool_Server_NewConnection(int s);
void Tool_Server_SelectLoop(int ls);
int Tool_Server_ReadAndWrite(int ls);
Bool Tool_Server_Process(int ls);
void Tool_Server_SelectWrite(Socket *skt);
void Tool_Server_SelectRead(Socket *skt, int ls);
void Tool_Server_SelectReadListen(Socket *skt, int ls);
void Tool_Server_SelectReadConnection(Socket *skt);
void Tool_Server(int port);
