/* semgen2.c */
void GenGetNounFeatures(Obj *obj, LexEntry *le, int pos, char *usagefeat, int is_count, Discourse *dc, int *tense, int *degree, int *gender, int *number);
PNode *GenObjNP1(Obj *obj, Obj *actual_obj, LexEntry *le, char *usagefeat, Obj *cas, int anaphora_on, Obj *arttype, PNode *agree_np, PNode *subj_np, int gender, int number, int person, LexEntry *adj_le, LexEntry *adv_le, char *adj_usagefeat, int superlative, int is_count, Discourse *dc);
PNode *GenElimDet(PNode *pn);
PNode *GenSwitchArticleToDefinite(PNode *pn, Discourse *dc);
PNode *GenGenitive2(PNode *pn, PNode *of_pn, int of_animate, Discourse *dc);
PNode *GenGenitive1(PNode *pn, PNode *of_pn, Obj *of_obj, Discourse *dc);
Bool GenFindInterpersonalRelation(Ts *ts, Obj *human_a, Obj **human_b, Obj **rel, int *iobji);
void GenGetRole(Obj *rel, int iobji, Obj **rel_article);
PNode *GenArea(Ts *ts, Obj *obj, PNode *pn, Discourse *dc);
PNode *GenPseudoOwnership(Ts *ts, Obj *rel, Obj *obj, PNode *pn, int i, Discourse *dc);
PNode *GenRelationNP1(Obj *rel, int iobji, Discourse *dc);
PNode *GenRelationNP(Obj *rel, Obj *of_obj, int iobji, Discourse *dc);
PNode *GenGenitive(Obj *obj, PNode *pn, Discourse *dc);
PNode *GenStringNP(Obj *obj, Discourse *dc);
PNode *GenObjNP(char *pos_restrict, Obj *obj, Obj *actual_obj, Obj *cas, int anaphora_on, int paruniv, Obj *arttype, PNode *agree_np, PNode *subj_np, int gender, int number, int person, Obj *comptense, int ancestor_ok, int require_noun, LexEntry *adj_le, LexEntry *adv_le, char *adj_usagefeat, int superlative, int is_count, Discourse *dc);
PNode *GenNP1(char *pos_restrict, Obj *obj, Obj *cas, int anaphora_on, int paruniv, Obj *arttype, PNode *agree_np, PNode *subj_np, int gender, int number, int person, Obj *comptense, int ancestor_ok, int require_noun, Discourse *dc);
PNode *GenNP(char *pos_restrict, Obj *obj, Obj *cas, int anaphora_on, int paruniv, Obj *arttype, PNode *agree_np, PNode *subj_np, int gender, int number, int person, Obj *comptense, int ancestor_ok, int require_noun, Discourse *dc);
PNode *GenVP1(LexEntry *le, char *usagefeat, Obj *comptense, int subjgender, int subjnumber, int subjperson, PNode *objnp, Discourse *dc);
PNode *GenVP(LexEntry *le, char *usagefeat, Obj *comptense, PNode *subjnp, PNode *objnp, Discourse *dc);
PNode *GenVPAdv1(LexEntry *le, char *usagefeat, Obj *comptense, int subjgender, int subjnumber, int subjperson, PNode *objnp, PNode *adv1, PNode *adv2, PNode *adv3, Discourse *dc);
PNode *GenVPAdv(LexEntry *le, char *usagefeat, Obj *comptense, PNode *subjnp, PNode *objnp, PNode *adv1, PNode *adv2, PNode *adv3, Discourse *dc);
PNode *GenLiteral(char *literal, int constit, int pos);
PNode *GenNumber(Float val, int always_numeric, int pos, int gender, Discourse *dc);
PNode *GenNumberWithUnits(Float val, Obj *units, int always_numeric, int pos, int gender, Discourse *dc);
PNode *GenTsRange(Obj *obj, int norepeat, Discourse *dc);
PNode *GenTsRange1(TsRange *tsr, Obj *obj, int norepeat, Discourse *dc);
PNode *GenTsRangeObj(Obj *obj, Discourse *dc);
PNode *GenTsEmbed(int constit, PNode *pn1, PNode *pn2);
PNode *GenTs(Ts *ts, int not_embedded, Discourse *dc);
PNode *GenDate(Ts *ts, int include_day_of_the_week, int include_day, int include_month, int include_year, Discourse *dc, int *day_included);
PNode *GenHour(Float hour, Discourse *dc, int *gender);
PNode *GenTod2(int hour, int min, int sec, Discourse *dc);
PNode *GenTod1(Tod tod, Discourse *dc);
PNode *GenTod(Ts *ts, Discourse *dc);
PNode *GenDayAndPartOfTheDay(Ts *ts, int not_embedded, Discourse *dc);
PNode *GenDurRelativeToNow(Ts *ts, int only_if_near, int use_word, int not_embedded, Discourse *dc);
PNode *GenDur1(Float dur, Discourse *dc);
PNode *GenDur(Obj *obj, Discourse *dc);
PNode *GenUnitOfMeasure(Float val, Float round_to_nearest, Obj *meas_type, Discourse *dc);
Obj *GenValueObj(Float val, Obj *class);
PNode *GenValueName(Float val, Obj *class, int pos, int gender, int number, Discourse *dc);
PNode *GenValueRangeName(Float val, Obj *class, int pos, int gender, int number, int paruniv, Discourse *dc);
PNode *GenDualValueRangeName(Float val1, Float val2, Obj *class, int pos, int gender, int number, Discourse *dc);
PNode *GenMakeAdverb(Obj *type, int degree, Discourse *dc);
PNode *GenMakeDet(Obj *type, int gender, int number, int person, Discourse *dc);
PNode *GenMakeExpl(LexEntry *le, PNode *subjnp, Discourse *dc);
PNode *GenMakeFrenchPossDet1(int owner_number, int owner_person, int modified_gender, int modified_number, Discourse *dc);
PNode *GenMakeFrenchPossDet(char *owner_feat, char *modified_feat, Discourse *dc);
PNode *GenMakeEnglishPossDet(char *owner_feat, Discourse *dc);
PNode *GenMakeNoun(Obj *obj, int number, Discourse *dc);
PNode *GenMakeConj(int constit, Obj *conj, PNode *pn1, PNode *pn2, Discourse *dc);
PNode *GenMakeSubordConj(int constit, PNode *pn, Discourse *dc);
PNode *GenMakePronoun(Obj *type, Obj *concept, int gender, int number, int person, Discourse *dc);
PNode *GenMakePrep(Obj *type, int gender, int number, Discourse *dc);
PNode *GenMakeElement(Obj *type, Discourse *dc);
PNode *GenMakePP1(LexEntry *le, PNode *np, Discourse *dc);
PNode *GenMakePP(Obj *type, PNode *np, Discourse *dc);
PNode *GenNounPrepNoun(Obj *det, Obj *obj1, Obj *prep, Obj *obj2, int number1, int number2, Discourse *dc);
PNode *GenIsa(Obj *obj, Obj *parent, Obj *comptense, Discourse *dc);
void GenNounString(Obj *obj, char *pos_restrict, int paruniv, int lang, int gender, int number, int person, int maxlen, Obj *arttype, int ancestor_ok, int showgender, Discourse *dc, char *s);
void GenConceptString(Obj *obj, Obj *article, int pos, int paruniv, int lang, int gender, int number, int person, int maxlen, int ancestor_ok, int showgender, Discourse *dc, char *s);
char *GenFeatAbbrevString(int feature, int force, Discourse *dc);
char *GenFeatAbbrevStringQuick(int feature);
char *GenConceptAbbrevString(Obj *con, int force, Discourse *dc);
void GenFeaturesAbbrevString(char *features, int canonize, int force, char *except, Discourse *dc, int maxlen, char *out);
void GenFeatureName(int feature, int lang, int maxlen, Discourse *dc, char *feature_r, char *parent_r);
void GenAppendNounGender(char *features, char *out);
