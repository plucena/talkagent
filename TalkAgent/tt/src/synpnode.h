/* synpnode.c */
PNodeList *PNodeListCreate(void);
void PNodeListFree(PNodeList *pnf);
Bool PNodeListIsEmpty(PNodeList *pnf);
Bool PNodeListAddAfter(PNodeList *pnf, PNode *searchfrom, PNode *m);
void PNodeListAdd(PNodeList *pnf, Channel *ch, PNode *m, int dbg);
PNode *PNodeListRemove(PNodeList *pnf);
Bool PNodeWithin(PNode *pn, size_t lowerb, size_t upperb, size_t lowerb_subj, size_t upperb_subj);
void PNodeListSpliceOutWithinLower(PNodeList *pnf, int type, size_t lowerb, size_t upperb, size_t lowerb_subj, size_t upperb_subj);
void PNodeListOverrideLower(PNodeList *pnf, int type);
void PNodeListSpliceOutType(PNodeList *pnf, int type, size_t lowerb, size_t upperb, size_t lowerb_subj, size_t upperb_subj);
void PNodeListOverride(PNodeList *pnf, int type1, int type2);
void PNodeListPhraseOverride1(PNodeList *pnf, size_t lowerb, size_t upperb, int len);
void PNodeListPhraseOverride(PNodeList *pnf);
void PNodeListSpliceOut(PNodeList *pnf, PNode *spliceout_pn);
void PNodeListAppend(PNodeList *pnf, PNodeList *pnf2, Channel *ch);
PNode *PNodeGetNext(PNode *pn, size_t after);
PNode *PNodeCreate(char feature, Lexitem *lexitem, PNode *pn1, PNode *pn2, size_t lowerb, size_t upperb, Obj *obj, PNode *next);
PNode *PNodeCreate1(void);
PNode *PNodeCreateString(char *s);
PNode *PNodeCopy(PNode *pn, PNode *next);
Bool PNodeAddPuncToEnd(PNode *pn, char *punc);
char *PNodeGetEndPunc(PNode *pn);
Bool PNodeEndGroupingPunc(PNode *pn);
PNode *PNodeFlattenAltern1(PNode *pn);
PNode *PNodeFlattenAltern(PNode *pn);
PNode *PNodeLast(PNode *pn);
PNode *PNodeAppendDestructive(PNode *pn1, PNode *pn2);
Bool PNodeIsOK(PNode *pn);
Bool PNodeIsPhrase(PNode *pn);
void PNodeFree(PNode *pn);
char *PNodeTypeToString(int typ);
void PNodePrintSubstring(FILE *stream, Channel *ch, size_t lowerb, size_t upperb, int expand_control_chars, int maxlen);
void PNodePrintTypeFeature(FILE *stream, PNode *pn, int shownum, int long_fmt);
void PNodePrint2(FILE *stream, Channel *ch, PNode *pn, int long_fmt);
void PNodePrint1(FILE *stream, Channel *ch, PNode *pn, int long_fmt);
void PNodePrint(FILE *stream, Channel *ch, PNode *pn);
void PNodeSocketPrint(Socket *skt, PNode *pn);
void ppn(PNode *pn);
void PNodePrintShort(FILE *stream, Channel *ch, PNode *pn);
Bool PNodeAddVersus(PNode *pn1, PNode *pn2);
Bool PNodeDidVersus(PNode *pn1, PNode *pn2);
void PNodeFreeTree(PNode *pn);
int PNodeDepth(PNode *pn);
PNode *PNodeConstit(char feature, PNode *pn1, PNode *pn2);
PNode *PNodeWord(char feature, char *word, char *features, LexEntry *le, Obj *obj);
Bool PNodeSimilar(PNode *pn1, PNode *pn2);
Bool PNodeSimilarIn(PNode *pn, ObjList *objs);
ObjList *PNodeAppendNonsimilar(ObjList *objs1, ObjList *objs2);
ObjList *PNodeUniquify(ObjList *objs);
int PNodeSyntacticType1(PNode *find_pn, PNode *cur_pn, int inside);
int PNodeSyntacticType(PNode *pn, PNode *pn_top);
PNode *PNodeSubject(PNode *pn);
Obj *PNodeNounConcept(PNode *pn);
Bool PNodeSameSubject(PNode *pn1, PNode *pn2);
PNode *PNodeFindFeat(PNode *pn, char *allfeat, char *anyfeat);
Bool PNodeFeatureIn(PNode *pn, int feat);
Bool PNodeFeaturesIn(PNode *pn, char *features);
Bool PNodeClassIn(PNode *pn, Obj *class);
Bool PNodeWordIn(PNode *pn, char *srcphrase, int pos, int lang);
Bool PNodeExclusiveFeatures(PNode *pn, char *features);
Bool PNodeIsCompoundTense(PNode *pn);
Bool PNodeIsProperNounTerminal(PNode *pn);
Bool PNodeIsProperNP(PNode *pn);
void PNodeCountVPObjects1(PNode *w1, PNode *w2, int *obj, int *iobj);
void PNodeCountVPObjects(PNode *w1, PNode *w2, int *obj, int *iobj);
int PNodeNumberOfWords(PNode *pn);
int PNodeNumberOfTerminals(PNode *pn);
LexEntry *PNodeLexEntry(PNode *pn);
LexEntry *PNodeLeftmostLexEntry1(PNode *pn);
LexEntry *PNodeLeftmostLexEntry(PNode *pn);
LexEntry *PNodeLeftmostPreposition(PNode *pn);
Lexitem *PNodeLeftmostLexitem(PNode *pn);
LexEntry *PNodeRightmostLexEntry(PNode *pn);
Lexitem *PNodeRightmostLexitem(PNode *pn);
PNode *PNodeLeftmost(PNode *pn);
LexEntry *PNodeSingletonLexEntry(PNode *pn);
PNode *PNodeLeftmostFeat(PNode *pn, int feature);
PNode *PNodeLeftmostKorR(PNode *pn);
PNode *PNodeLeftmostK(PNode *pn);
Bool PNodeKIsLeftmost(PNode *pn);
void PNodeFindHeadVerb1(PNode *w, int leftmost, int rightmost, PNode **auxverb, PNode **mainverb);
void PNodeFindHeadVerb(PNode *w, PNode **auxverb, PNode **mainverb);
void PNodeFindHeadVerbS(PNode *z, PNode **auxverb, PNode **mainverb);
LexEntry *PNodeFindMainverbLe(PNode *w);
Lexitem *PNodeFindAuxverbLexitem(PNode *w);
PNode *PNodeFindHeadAdj(PNode *pn);
Bool PNodeIsX_XX_X9(PNode *pn);
Bool PNodeGetHeadNounFeatures(PNode *pn, Bool actual, int *gender, int *number, int *person);
void PNodeGetFeatures(PNode *pn, int *gender, int *number);
void PNodeGetGenderNumberPerson(PNode *pn, int *gender, int *number, int *person);
void PNodeBreakup(PNode *pn);
void PNodeAddAllcons(PNode *pn, Obj *obj);
void PNodePrettyPrint1(FILE *stream, Channel *ch, PNode *pn, int column, int long_fmt);
void PNodePrettyPrint(FILE *stream, Channel *ch, PNode *pn);
void PNodeTextPrintStream(FILE *stream, PNode *pn, int eos, Discourse *dc);
void PNodePrintStringArrayAdd(StringArray *sa, PNode *pn, int eos, Discourse *dc);
void PNodeTextPrint(Text *text, PNode *pn, int eos, int showgender, int showalterns, Discourse *dc);
void PNodeTextPrint1(Text *text, PNode *pn, int capitalize, int showgender, Discourse *dc);
void PNodeTextPrint2(Text *text, PNode *pn, int capitalize, int showgender, Discourse *dc);
Bool ScoreIsValid(Float score);
Float ScoreCombine(Float score1, Float score2);
void ScorePrint(FILE *stream, Float score);
