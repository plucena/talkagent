/* repdb.c */
void DbInit(void);
void DbHashSym(char *s1, char *s2, char *r);
void DbHashEnter(HashTable *ht, Obj *objs, Obj *elema, Obj *elemb);
ObjList *DbHashRetrieve(HashTable *ht, Obj *elema, Obj *elemb);
Bool DbGenIsPruned(Obj *obj);
void DbAssert1(Obj *obj);
void DbAssert(TsRange *tsr, Obj *obj);
void DbAssertActionDur(Ts *ts, Dur dur, Obj *obj);
void DbAssertActionRange(Ts *startts, Ts *stopts, Obj *obj);
void DbAssertState(Ts *ts, Dur dur, Obj *obj);
ObjList *DbRetrieval(Ts *ts, TsRange *tsr, Obj *ptn, ObjList *r, Ts *tsretract, Bool freeptn);
ObjList *DbRetrievalDesc(Ts *ts, TsRange *tsr, Obj *ptn, int elemi, ObjList *r, Ts *tsretract, int lockout, int depth, Bool freeptn);
ObjList *DbRetrievalAnc(Ts *ts, TsRange *tsr, Obj *ptn, int elemi, ObjList *r, Ts *tsretract, int lockout, int depth, Bool freeptn);
ObjList *DbRetrievalAncDesc(Ts *ts, TsRange *tsr, Obj *ptn, int anci, int desci, ObjList *r, Ts *tsretract, int ancdepth, int descdepth, Bool freeptn);
ObjList *DbRetrieveExactIth(int i, Ts *ts, TsRange *tsr, Obj *ptn, Bool freeptn);
ObjList *DbRetrieveDescIth(int i, Ts *ts, TsRange *tsr, Obj *ptn, int j, Bool freeptn);
void DbRetractList(Ts *ts, ObjList *objs);
Obj *DbGetEnumValue(Ts *ts, TsRange *tsr, Obj *prop, Obj *obj, Obj *def);
Obj *DbGetEnumAssertion(Ts *ts, Obj *prop, Obj *obj);
Bool DbIsEnumValue(Ts *ts, Obj *prop, Obj *obj);
Obj *DbGetAttributeAssertion(Ts *ts, TsRange *tsr, Obj *attr, Obj *obj);
Float DbGetAttributeValue(Ts *ts, TsRange *tsr, Obj *attr, Obj *obj);
ObjList *DbGetRelationAssertions(Ts *ts, TsRange *tsr, Obj *prop, Obj *obj, int i, ObjList *r);
ObjList *DbGetRelationValues(Ts *ts, TsRange *tsr, Obj *prop, Obj *obj, int i, ObjList *r);
Obj *DbGetRelationValue(Ts *ts, TsRange *tsr, Obj *prop, Obj *obj, Obj *def);
Obj *DbGetRelationValue1(Ts *ts, TsRange *tsr, Obj *prop, Obj *obj, Obj *def);
Bool DbIsPartOf1(Ts *ts, TsRange *tsr, Obj *part, Obj *whole, int depth, Obj *rel);
Bool DbIsPartOf(Ts *ts, TsRange *tsr, Obj *part, Obj *whole);
Bool DbIsPartOf_Simple(Obj *part, Obj *whole, int depth);
Obj *DbRetrievePart1(Ts *ts, TsRange *tsr, Obj *part, Obj *whole, int depth);
Obj *DbRetrievePart(Ts *ts, TsRange *tsr, Obj *part, Obj *whole);
Obj *DbRetrieveWhole(Ts *ts, TsRange *tsr, Obj *whole, Obj *part);
ObjList *DbRetrieveInvolving(Ts *ts, TsRange *tsr, Obj *obj, int pred_ok, ObjList *r);
ObjList *DbRetrieveInvolving2(Ts *ts, TsRange *tsr, Obj *obj1, Obj *obj2, ObjList *r);
ObjList *DbRetrieveInvolving2AncDesc(Ts *ts, TsRange *tsr, Obj *obj1, Obj *obj2, ObjList *rest);
Intension *IntensionCreate(void);
void IntensionInit(Intension *itn);
void IntensionPrint(FILE *stream, Intension *itn);
Float DbSatisfiesIntension_Props(Ts *ts, TsRange *tsr, Obj *concrete, Obj *class, ObjList *props, Obj *skip_this_prop);
Float DbSatisfiesIntension(Obj *concrete, Intension *itn, Obj *skip_this_prop);
ObjList *DbFindIntension2(ObjList *candidates, Intension *itn, Obj *skip_this_prop, ObjList *r);
ObjList *DbPseudoOwnerRetrieve(Ts *ts, TsRange *tsr, Obj *obj, Obj *of_obj, Obj *rel, int iobji, ObjList *r);
ObjList *DbGenitiveRetrieve(Ts *ts, TsRange *tsr, Obj *obj, Obj *of_obj);
ObjList *DbFindHumansWithName(Ts *ts, TsRange *tsr, Obj *rel, ObjList *names, ObjList *intersect);
ObjList *DbHumanNameRetrieve(Ts *ts, TsRange *tsr, Name *nm);
ObjList *DbFindIntensionHumanName(Intension *itn);
ObjList *DbFindIntensionContext(Intension *itn);
ObjList *DbFindIntension1(Intension *itn, ObjList *r);
ObjListList *ObjListListSuperlativeExpand(ObjList *props);
ObjList *DbFindIntension(Intension *itn, ObjList *r);
Obj *DbRestrictSlotname(int i);
Bool DbIsLexEntryFound(Obj *prop, Obj *obj, Discourse *dc);
Bool DbRestrictionGen1(Obj *prop, Obj *concept, Obj *rel, int reli, int *found);
void DbRestrictionGen(Obj *obj, Discourse *dc);
Obj *PronounToClass(Obj *pronoun, PNode *pronoun_pn, int lang);
Bool ISAP_PNode(Obj *class, Obj *obj, PNode *obj_pn, int lang);
Bool DbRestrictionParse1(Obj **elems, PNode **pn_elems, Obj *prop, int *len, Obj *r_rel, int reli, Discourse *dc);
Bool DbRestrictionParse(Obj **elems, PNode **pn_elems, int *newlen, Discourse *dc);
Obj *DbGetRestriction(Obj *obj, int slotnum);
Bool DbHasRestriction(Obj *obj, int slotnum);
Bool DbRestrictValidate1(Obj *obj, Obj *head, int i, Obj *slotvalue, Bool print, int dbglevel);
Bool DbRestrictValidate(Obj *obj, Bool print);
void DbQueryTool(void);
